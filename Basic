Matlab practice 

d = size(X) returns the sizes of each dimension of array X in a vector d with ndims(X) elements.

y(1:3)

ans =

     1     2     3

y=1:5;
y

y =

     1     2     3     4     5


z=[1; 2; 3; 4; 5];
z

z =

     1
     2
     3
     4
     5

z'

ans =

     1     2     3     4     5


zeros(10)

ans =

     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0


ones(4,1)

ans =

     1
     1
     1
     1


x=1:4;
y=1:4;
x*y
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mtimes')" style="font-weight:bold"> * </a>
Inner matrix dimensions must agree.
} 
x.*y // multiply element by element 


ans =

     1     4     9    16


x=rand(1,1000);
hist(x)

>> size(x)

ans =

           1        1000




x=randn(1,1000);
hist(x)




randn== created a random distribution0 around 1 


x=ones(5)

x =

     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1
     1     1     1     1     1

x(:,2)=0

x =

     1     0     1     1     1
     1     0     1     1     1
     1     0     1     1     1
     1     0     1     1     1
     1     0     1     1     1

x(:,[1 5])=99

x =

    99     0     1     1    99
    99     0     1     1    99
    99     0     1     1    99
    99     0     1     1    99
    99     0     1     1    99



1:2:10

ans =

     1     3     5     7     9


10:-1:4

ans =

    10     9     8     7     6     5     4
 The incrementing step 


for n=1:2:10
a(n)=n;
end
a

a =

     1     0     3     0     5     0     7     0     9
 As the steps of incrementing are 2â€™s so 
Zero is placed in the even \

But 
a=1:2:10;
a

a =

     1     3     5     7     9


The for lopp the lop forced to go through the even data holders iin the rray 



a(1:2:100)=0;
a

a =

  Columns 1 through 9

     0     2     0     4     0     6     0     8     0

  Columns 10 through 18

    10     0    12     0    14     0    16     0    18

  Columns 19 through 27

     0    20     0    22     0    24     0    26     0

  Columns 28 through 36

    28     0    30     0    32     0    34     0    36

  Columns 37 through 45

     0    38     0    40     0    42     0    44     0

  Columns 46 through 54

    46     0    48     0    50     0    52     0    54

  Columns 55 through 63

     0    56     0    58     0    60     0    62     0

  Columns 64 through 72

    64     0    66     0    68     0    70     0    72

  Columns 73 through 81

     0    74     0    76     0    78     0    80     0

  Columns 82 through 90

    82     0    84     0    86     0    88     0    90

  Columns 91 through 99

     0    92     0    94     0    96     0    98     0

  Column 100

   100

ind=find(G<0.0)

ind =

     3     6     7    11    14    16    17

G(ind)=0;
G

G =

  Columns 1 through 5

    0.5377    1.8339         0    0.8622    0.3188

  Columns 6 through 10

         0         0    0.3426    3.5784    2.7694

  Columns 11 through 15

         0    3.0349    0.7254         0    0.7147

  Columns 16 through 20

         0         0    1.4897    1.4090    1.4172




Basically G(find(G<0))=0;

mod(4,2)

ans =

     0

mod(4,3)

ans =

     1

a=1:100;
a

a =

  Columns 1 through 9

     1     2     3     4     5     6     7     8     9

  Columns 10 through 18

    10    11    12    13    14    15    16    17    18

  Columns 19 through 27

    19    20    21    22    23    24    25    26    27

  Columns 28 through 36

    28    29    30    31    32    33    34    35    36

  Columns 37 through 45

    37    38    39    40    41    42    43    44    45

  Columns 46 through 54

    46    47    48    49    50    51    52    53    54

  Columns 55 through 63

    55    56    57    58    59    60    61    62    63

  Columns 64 through 72

    64    65    66    67    68    69    70    71    72

  Columns 73 through 81

    73    74    75    76    77    78    79    80    81

  Columns 82 through 90

    82    83    84    85    86    87    88    89    90

  Columns 91 through 99

    91    92    93    94    95    96    97    98    99

  Column 100

   100

mod(a,2)

ans =

  Columns 1 through 9

     1     0     1     0     1     0     1     0     1

  Columns 10 through 18

     0     1     0     1     0     1     0     1     0

  Columns 19 through 27

     1     0     1     0     1     0     1     0     1

  Columns 28 through 36

     0     1     0     1     0     1     0     1     0

  Columns 37 through 45

     1     0     1     0     1     0     1     0     1

  Columns 46 through 54

     0     1     0     1     0     1     0     1     0

  Columns 55 through 63

     1     0     1     0     1     0     1     0     1

  Columns 64 through 72

     0     1     0     1     0     1     0     1     0

  Columns 73 through 81

     1     0     1     0     1     0     1     0     1

  Columns 82 through 90

     0     1     0     1     0     1     0     1     0

  Columns 91 through 99

     1     0     1     0     1     0     1     0     1

  Column 100

     0

a=1:100;
a(find(mod(a,2)==1))=0;
 Find all odd numbers 



%
% Basic Plotting
%

x=1:10;

y=x.^3;

y =

  Columns 1 through 4

           1           8          27          64

  Columns 5 through 8

         125         216         343         512

  Columns 9 through 10

         729        1000

plot(x,y,'bo')
xlabel('Time')
ylabel('Amplitude')




h=plot(x,y,'bo')

h = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> with properties:

              Color: [0 0 1]
          LineStyle: 'none'
          LineWidth: 0.5000
             Marker: 'o'
         MarkerSize: 6
    MarkerFaceColor: 'none'
              XData: [1 2 3 4 5 6 7 8 9 10]
              YData: [1 8 27 64 125 216 343 512 729 1000]
              ZData: [1x0 double]

  Show <a href="matlab:if exist('h', 'var'), matlab.graphics.internal.getForDisplay('h', h, 'matlab.graphics.chart.primitive.Line'), else, matlab.graphics.internal.getForDisplay('h'), end">all properties</a>

more on
set(h)
    AlignVertexCenters: {'on'  'off'}
            BusyAction: {'queue'  'cancel'}
         ButtonDownFcn: {}
              Children: {}
              Clipping: {'on'  'off'}
                 Color: {1x0 cell}
             CreateFcn: {}
             DeleteFcn: {}
           DisplayName: {}
      HandleVisibility: {'on'  'callback'  'off'}
               HitTest: {'on'  'off'}
         Interruptible: {'on'  'off'}
              LineJoin: {'chamfer'  'miter'  'round'}
             LineStyle: {'-'  '--'  ':'  '-.'  'none'}
             LineWidth: {}
                Marker: {1x14 cell}
       MarkerEdgeColor: {'auto'  'none'}
       MarkerFaceColor: {'auto'  'none'}
            MarkerSize: {}
                Parent: {}
         PickableParts: {'visible'  'none'  'all'}
              Selected: {'on'  'off'}
    SelectionHighlight: {'on'  'off'}
                   Tag: {}
         UIContextMenu: {}
              UserData: {}
               Visible: {'on'  'off'}
                 XData: {}
             XDataMode: {'auto'  'manual'}
           XDataSource: {}
                 YData: {}
           YDataSource: {}
                 ZData: {}
           ZDataSource: {}




 plot(x,y,'bs','MarkerSize',30,'MarkerFaceColor',0.9.*[1 1 1])




set(gca,'XDir','Reverse')








x=0.0:0.1:2;
y=x.*exp(-x);

Another way 

mfunc=@(x) x.*exp(-x)

mfunc(0 : 0.1 : 2)


mfunc=@(x) exp(-x/4).*sin(x)



 Element by elemnt 

x=0:0.2:20;
plot(x,mfunc(x),'k-')

 Calling path will show the pathe currently 

x=[1 5 20 23];
y=[1 10 11 7];
plot(x,y,'bs','MarkerSize',14)
axis([0 25 0 15])




To creat a random unsupervised interpolation 
figure(1)
hold('on')
plot(x,y,'b-')
figure(1)



Can use the function interp1
xfine=0.:0.1:23;
yfine=interp1(x,y,xfine,'spline');
plot(xfine,yfine,'r-')




help trapz
 <strong>trapz</strong>  Trapezoidal numerical integration.

answer1=trapz(x,y);

help intregral
--- help for <strong>integral</strong> ---



 <strong>integral</strong>  Numerically evaluate integral.

answer2=integral(f,0,2*pi);

x=1:5;
y=1:5;
x

x =

     1     2     3     4     5

y

y =

     1     2     3     4     5

[X,Y]=meshgrid(x,y);
whos
  Name      Size            Bytes  Class     Attributes

  X         5x5               200  double              
  Y         5x5               200  double              
  x         1x5                40  double              
  y         1x5                40  double              

X

X =

     1     2     3     4     5
     1     2     3     4     5
     1     2     3     4     5
     1     2     3     4     5
     1     2     3     4     5

Y

Y =

     1     1     1     1     1
     2     2     2     2     2
     3     3     3     3     3
     4     4     4     4     4
     5     5     5     5     5
 CREAT a linear grid and then disturb it 
Either on the axis or in a radial form or etc 


[X,Y]=meshgrid(x,y);
Z=my_2gaussians(X,Y);
 Will creat a normal distibuted grid by the gaussian fiunction previously wrote 

pcolor(X,Y,Z)  Pseudocolor (checkerboard) plot.

contour
 <strong>contour</strong> Contour plot.


surf
 <strong>surf</strong>   3-D colored surface.

surf(X,Y,Z)
shading('interp')
figure(1)
view([60 60])


s='17.0'

s =

17.0

str2num(s)

num2str(17)

ans =

17


s

s =

17.0

s+13

ans =

    62    68    59    61



If s is string so the abve ^^

char([62-13 68-13 59-13 61-13])

ans =

17.0

Comparing 
s='a';
s

s =

a

strcmp(s,'a')

ans =

     1

strcmp(s,'b')

ans =

     0


s='Hi! This is Aaron';
strfind(s,'Aaron')

ans =

    13

strfind(s,'Erin')

ans =

     []



isempty(strfind(s,'Erin'))

ans =

     1



== yes is empty 


strrep(s,'Aaron','Erin')

ans =

Hi! This is Erin


Representation way 
element={'H',13.6,'He',24.4,'Li',5.39};
        

element

element = 

    'H'    [13.6000]    'He'    [24.4000]    'Li'    [5.3900]


type demo_structure1

%
% demo of structures in Matlab;
%

particle(1).type='Smooth Ball';
particle(1).radius=0.1;
particle(1).mass=0.4;

In ca
particle(1).dragC=1.0;
particle(1).position=[0 1 -2];
particle(1).velocity=[10 0 0];

particle(2).type='Rough Ball';
particle(2).radius=0.1;
particle(2).mass=0.4;
particle(2).dragC=1.5;
particle(2).position=[0 0 0];
particle(2).velocity=[0 10 0];




Incase 
A function skeleton 
% function [funcOutput]=function_skeleton(funcInput,vargarin)
%
% Skeleton for Matlab functions.
%
% Temporary function: square, element by element, funcInput and 
% return as funcOutput. On error [] is returned for funcOutput.
%
% Required Input:
%
% funcInput	input matrix of numbers
%
% Returned Output:
%
% funcOuput	output matrix of numbers which is the element 
%               by element square of the input. Returns [] on
%               error.
%
% Varargin:
%
% 'Verbose'	[0] 1/0 for lots/no output
% 'DoPlot'	[0] set to 1 to make a plot
%
% Requires: no external m-files
%
% Example Use: y=function_skeleton([1:10],'Verbose',1,'DoPlot',1);
%
% To Do: no known issues
%
% Author: ASigut 20 Sept. 2017
%
function [funcOutput]=function_skeleton(funcInput,varargin)

%
% If called with no arguments, echo a useage line. 
%
if nargin == 0
   disp(' ')
   disp('Y=function_skeleton(X,vargin)')
   disp(' ')
   funcOutput=[];
   return
end

if ~isnumeric(funcInput)
   disp(' ')
   disp('ERROR: funcInput must be numeric')
   funcOutput=[];
   return
end

%
% Check that all varargin come in pairs.
%
if mod(length(varargin),2) ~= 0
  disp(' ')
  disp('Error: mis-match (odd number) of vargargin inputs')
  disp(' ')
  funcOutput=[];
  return
end

%
% Set defaults and parse the varargin arguments.
%
verbose=0;
doplot=0;

for i=1:2:length(varargin)
    idone=0;
    if strcmp(varargin{i},'Verbose') == 1
       verbose=varargin{i+1};
       idone=1;
    end
    if strcmp(varargin{i},'DoPlot') == 1
       doplot=varargin{i+1};
       idone=1;
    end
    if idone == 0
       disp(' ')
       disp(sprintf('WARNING: unknown varargin <%s> ignored',varargin{i}))
       disp(' ')
    end
end

%
% Main function statements ++++++++++++++++++++
%

funcOutput=funcInput.^2;

%
% Optional output +++++++++++++++++++++++++++++
%
if verbose == 1
   disp(' ')
   for n=1:length(funcInput)
       disp(sprintf('%4i  %10.3e  %10.3e',n,funcInput(n),funcOutput(n)))
   end
End



if doplot == 1
   figure
   plot(funcInput,funcOutput,'bo','MarkerFaceColor',0.8.*[1 1 1])
   xlabel('X','FontWeight','Bold')
   ylabel('Y','FontWeight','Bold')
   set(gca,'FontWeight','Bold')
end



Example of writing to a file 

function write_to_file(Nmax,filename)

if ~ischar(filename)
   disp(' ')
   disp('ERROR(write_to_screen: filename must be a string')
   disp(' ')
   return
End // checking the file name

fid=fopen(filename,'w');

disp(' ')
disp(sprintf('Opening file %s for writing, fid = %i',filename,fid))
disp(' ')

my_numbers=randn(Nmax,3);
%
% Nice neat row-by-row output
%

for n=1:Nmax
    fprintf(fid,'%4i %12.3e %12.3e %12.3e\n',n,my_numbers(n,:));
end

fclose(fid);


a=load('MyOutput.dat') loading data from a file 



Saving data to a file 
a=1:100;
b=a.^3;
c=sin(b);
whos
  Name      Size             Bytes  Class     Attributes

  a         1x100              800  double              
  b         1x100              800  double              
  c         1x100              800  double              

save('MyVarables.mat');




load('MyVariables.mat');
whos
  Name        Size             Bytes  Class     Attributes

  a         100x100            80000  double              
  b         100x100            80000  double              
  c         100x100            80000  double              




































 
































